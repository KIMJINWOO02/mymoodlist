"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_storage_ts";
exports.ids = ["_ssr_src_lib_storage_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/storage.ts":
/*!****************************!*\
  !*** ./src/lib/storage.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callbackStorage: () => (/* binding */ callbackStorage)\n/* harmony export */ });\n// Ïù∏Î©îÎ™®Î¶¨ ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•ÏÜå\nclass CallbackStorage {\n    // ÏÉà ÏûëÏóÖ Îì±Î°ù\n    registerTask(taskId) {\n        const taskData = {\n            taskId,\n            status: \"pending\",\n            createdAt: new Date()\n        };\n        console.log(\"\\uD83D\\uDD35 BEFORE registration - Storage size:\", this.storage.size);\n        console.log(\"\\uD83D\\uDD35 BEFORE registration - All tasks:\", Array.from(this.storage.keys()));\n        this.storage.set(taskId, taskData);\n        console.log(\"\\uD83D\\uDCDD Registered task:\", taskId, \"Storage size:\", this.storage.size);\n        console.log(\"\\uD83D\\uDCCB Task data:\", taskData);\n        console.log(\"\\uD83D\\uDFE2 AFTER registration - All tasks:\", Array.from(this.storage.keys()));\n        // Îì±Î°ù ÏßÅÌõÑ Î∞îÎ°ú ÌôïÏù∏\n        const verified = this.storage.get(taskId);\n        console.log(\"‚úÖ Verification - task exists:\", !!verified);\n        console.log(\"\\uD83D\\uDD0D Storage instance ID:\", this.constructor.name, this);\n    }\n    // ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•\n    saveCallback(taskId, callbackData) {\n        const existing = this.storage.get(taskId);\n        if (!existing) {\n            console.warn(\"‚ö†Ô∏è Callback received for unknown task:\", taskId);\n            // ÎØ∏Îì±Î°ù ÏûëÏóÖÎèÑ Ï†ÄÏû•\n            this.storage.set(taskId, {\n                taskId,\n                status: \"pending\",\n                createdAt: new Date()\n            });\n        }\n        // ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Î∂ÑÏÑù Î∞è Ï†ÄÏû•\n        const updated = {\n            ...existing,\n            taskId,\n            rawData: callbackData,\n            completedAt: new Date()\n        };\n        // Suno API ÏùëÎãµ Íµ¨Ï°∞Ïóê Îî∞Î•∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú\n        if (callbackData.audio_url || callbackData.audioUrl) {\n            updated.audioUrl = callbackData.audio_url || callbackData.audioUrl;\n            updated.status = \"completed\";\n        }\n        if (callbackData.title) {\n            updated.title = callbackData.title;\n        }\n        if (callbackData.duration) {\n            updated.duration = callbackData.duration;\n        }\n        if (callbackData.image_url || callbackData.imageUrl) {\n            updated.imageUrl = callbackData.image_url || callbackData.imageUrl;\n        }\n        // ÏóêÎü¨ Ï≤òÎ¶¨\n        if (callbackData.error || callbackData.status === \"error\") {\n            updated.status = \"failed\";\n            updated.error = callbackData.error || \"Unknown error\";\n        }\n        this.storage.set(taskId, updated);\n        console.log(\"\\uD83D\\uDCBE Saved callback data for task:\", taskId, updated);\n    }\n    // Í≤∞Í≥º Ï°∞Ìöå\n    getResult(taskId) {\n        return this.storage.get(taskId) || null;\n    }\n    // Î™®Îì† ÏûëÏóÖ Ï°∞Ìöå (ÎîîÎ≤ÑÍπÖÏö©)\n    getAllTasks() {\n        console.log(\"\\uD83D\\uDD0D getAllTasks called - Storage size:\", this.storage.size);\n        console.log(\"\\uD83D\\uDD0D getAllTasks - All task IDs:\", Array.from(this.storage.keys()));\n        console.log(\"\\uD83D\\uDD0D Storage instance ID:\", this.constructor.name, this);\n        return Array.from(this.storage.values());\n    }\n    // ÏôÑÎ£åÎêú ÏûëÏóÖÎßå Ï°∞Ìöå\n    getCompletedTasks() {\n        return Array.from(this.storage.values()).filter((task)=>task.status === \"completed\");\n    }\n    // Ïò§ÎûòÎêú ÏûëÏóÖ Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨)\n    cleanup(maxAgeHours = 24) {\n        const cutoff = new Date(Date.now() - maxAgeHours * 60 * 60 * 1000);\n        let deleted = 0;\n        for (const [taskId, data] of this.storage.entries()){\n            if (data.createdAt < cutoff) {\n                this.storage.delete(taskId);\n                deleted++;\n            }\n        }\n        if (deleted > 0) {\n            console.log(`üßπ Cleaned up ${deleted} old tasks`);\n        }\n        return deleted;\n    }\n    constructor(){\n        this.storage = new Map();\n    }\n}\nlet callbackStorageInstance;\nif (typeof globalThis !== \"undefined\") {\n    if (!globalThis.__musicAppCallbackStorage) {\n        globalThis.__musicAppCallbackStorage = new CallbackStorage();\n        console.log(\"\\uD83D\\uDD27 Created NEW CallbackStorage instance (global)\");\n    } else {\n        console.log(\"\\uD83D\\uDD04 Using EXISTING CallbackStorage instance (global)\");\n    }\n    callbackStorageInstance = globalThis.__musicAppCallbackStorage;\n} else {\n    callbackStorageInstance = new CallbackStorage();\n    console.log(\"\\uD83D\\uDD27 Created NEW CallbackStorage instance (local)\");\n}\nconst callbackStorage = callbackStorageInstance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/storage.ts\n");

/***/ })

};
;