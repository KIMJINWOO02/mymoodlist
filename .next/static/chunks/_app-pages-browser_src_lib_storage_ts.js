"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_storage_ts"],{

/***/ "(app-pages-browser)/./src/lib/storage.ts":
/*!****************************!*\
  !*** ./src/lib/storage.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callbackStorage: function() { return /* binding */ callbackStorage; }\n/* harmony export */ });\n// 인메모리 콜백 데이터 저장소\nclass CallbackStorage {\n    // 새 작업 등록\n    registerTask(taskId) {\n        const taskData = {\n            taskId,\n            status: \"pending\",\n            createdAt: new Date()\n        };\n        console.log(\"\\uD83D\\uDD35 BEFORE registration - Storage size:\", this.storage.size);\n        console.log(\"\\uD83D\\uDD35 BEFORE registration - All tasks:\", Array.from(this.storage.keys()));\n        this.storage.set(taskId, taskData);\n        console.log(\"\\uD83D\\uDCDD Registered task:\", taskId, \"Storage size:\", this.storage.size);\n        console.log(\"\\uD83D\\uDCCB Task data:\", taskData);\n        console.log(\"\\uD83D\\uDFE2 AFTER registration - All tasks:\", Array.from(this.storage.keys()));\n        // 등록 직후 바로 확인\n        const verified = this.storage.get(taskId);\n        console.log(\"✅ Verification - task exists:\", !!verified);\n        console.log(\"\\uD83D\\uDD0D Storage instance ID:\", this.constructor.name, this);\n    }\n    // 콜백 데이터 저장\n    saveCallback(taskId, callbackData) {\n        const existing = this.storage.get(taskId);\n        if (!existing) {\n            console.warn(\"⚠️ Callback received for unknown task:\", taskId);\n            // 미등록 작업도 저장\n            this.storage.set(taskId, {\n                taskId,\n                status: \"pending\",\n                createdAt: new Date()\n            });\n        }\n        // 콜백 데이터 구조 분석 및 저장\n        const updated = {\n            ...existing,\n            taskId,\n            rawData: callbackData,\n            completedAt: new Date()\n        };\n        // Suno API 응답 구조에 따른 데이터 추출\n        if (callbackData.audio_url || callbackData.audioUrl) {\n            updated.audioUrl = callbackData.audio_url || callbackData.audioUrl;\n            updated.status = \"completed\";\n        }\n        if (callbackData.title) {\n            updated.title = callbackData.title;\n        }\n        if (callbackData.duration) {\n            updated.duration = callbackData.duration;\n        }\n        if (callbackData.image_url || callbackData.imageUrl) {\n            updated.imageUrl = callbackData.image_url || callbackData.imageUrl;\n        }\n        // 에러 처리\n        if (callbackData.error || callbackData.status === \"error\") {\n            updated.status = \"failed\";\n            updated.error = callbackData.error || \"Unknown error\";\n        }\n        this.storage.set(taskId, updated);\n        console.log(\"\\uD83D\\uDCBE Saved callback data for task:\", taskId, updated);\n    }\n    // 결과 조회\n    getResult(taskId) {\n        return this.storage.get(taskId) || null;\n    }\n    // 모든 작업 조회 (디버깅용)\n    getAllTasks() {\n        console.log(\"\\uD83D\\uDD0D getAllTasks called - Storage size:\", this.storage.size);\n        console.log(\"\\uD83D\\uDD0D getAllTasks - All task IDs:\", Array.from(this.storage.keys()));\n        console.log(\"\\uD83D\\uDD0D Storage instance ID:\", this.constructor.name, this);\n        return Array.from(this.storage.values());\n    }\n    // 완료된 작업만 조회\n    getCompletedTasks() {\n        return Array.from(this.storage.values()).filter((task)=>task.status === \"completed\");\n    }\n    // 오래된 작업 정리 (메모리 관리)\n    cleanup() {\n        let maxAgeHours = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 24;\n        const cutoff = new Date(Date.now() - maxAgeHours * 60 * 60 * 1000);\n        let deleted = 0;\n        for (const [taskId, data] of this.storage.entries()){\n            if (data.createdAt < cutoff) {\n                this.storage.delete(taskId);\n                deleted++;\n            }\n        }\n        if (deleted > 0) {\n            console.log(\"\\uD83E\\uDDF9 Cleaned up \".concat(deleted, \" old tasks\"));\n        }\n        return deleted;\n    }\n    constructor(){\n        this.storage = new Map();\n    }\n}\nlet callbackStorageInstance;\nif (typeof globalThis !== \"undefined\") {\n    if (!globalThis.__musicAppCallbackStorage) {\n        globalThis.__musicAppCallbackStorage = new CallbackStorage();\n        console.log(\"\\uD83D\\uDD27 Created NEW CallbackStorage instance (global)\");\n    } else {\n        console.log(\"\\uD83D\\uDD04 Using EXISTING CallbackStorage instance (global)\");\n    }\n    callbackStorageInstance = globalThis.__musicAppCallbackStorage;\n} else {\n    callbackStorageInstance = new CallbackStorage();\n    console.log(\"\\uD83D\\uDD27 Created NEW CallbackStorage instance (local)\");\n}\nconst callbackStorage = callbackStorageInstance;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc3RvcmFnZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsa0JBQWtCO0FBY2xCLE1BQU1BO0lBR0osVUFBVTtJQUNWQyxhQUFhQyxNQUFjLEVBQVE7UUFDakMsTUFBTUMsV0FBVztZQUNmRDtZQUNBRSxRQUFRO1lBQ1JDLFdBQVcsSUFBSUM7UUFDakI7UUFFQUMsUUFBUUMsR0FBRyxDQUFDLG9EQUEwQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSTtRQUN2RUgsUUFBUUMsR0FBRyxDQUFDLGlEQUF1Q0csTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJO1FBRS9FLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxHQUFHLENBQUNaLFFBQVFDO1FBRXpCSSxRQUFRQyxHQUFHLENBQUMsaUNBQXVCTixRQUFRLGlCQUFpQixJQUFJLENBQUNPLE9BQU8sQ0FBQ0MsSUFBSTtRQUM3RUgsUUFBUUMsR0FBRyxDQUFDLDJCQUFpQkw7UUFDN0JJLFFBQVFDLEdBQUcsQ0FBQyxnREFBc0NHLE1BQU1DLElBQUksQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksSUFBSTtRQUU5RSxjQUFjO1FBQ2QsTUFBTUUsV0FBVyxJQUFJLENBQUNOLE9BQU8sQ0FBQ08sR0FBRyxDQUFDZDtRQUNsQ0ssUUFBUUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUNPO1FBQy9DUixRQUFRQyxHQUFHLENBQUMscUNBQTJCLElBQUksQ0FBQ1MsV0FBVyxDQUFDQyxJQUFJLEVBQUUsSUFBSTtJQUNwRTtJQUVBLFlBQVk7SUFDWkMsYUFBYWpCLE1BQWMsRUFBRWtCLFlBQWlCLEVBQVE7UUFDcEQsTUFBTUMsV0FBVyxJQUFJLENBQUNaLE9BQU8sQ0FBQ08sR0FBRyxDQUFDZDtRQUNsQyxJQUFJLENBQUNtQixVQUFVO1lBQ2JkLFFBQVFlLElBQUksQ0FBQywwQ0FBMENwQjtZQUN2RCxhQUFhO1lBQ2IsSUFBSSxDQUFDTyxPQUFPLENB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QUcsQ0FBQztJQUNkLE9BQU87UUFDTEQsUUFBUUMsR0FBRyxDQUFDO0lBQ2Q7SUFDQXdDLDBCQUEwQkMsV0FBV0MseUJBQXlCO0FBQ2hFLE9BQU87SUFDTEYsMEJBQTBCLElBQUloRDtJQUM5Qk8sUUFBUUMsR0FBRyxDQUFDO0FBQ2Q7QUFFTyxNQUFNMkMsa0JBQWtCSCx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9zdG9yYWdlLnRzP2FmZTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g7J2466mU66qo66asIOy9nOuwsSDrjbDsnbTthLAg7KCA7J6l7IaMXG5pbnRlcmZhY2UgQ2FsbGJhY2tEYXRhIHtcbiAgdGFza0lkOiBzdHJpbmc7XG4gIGF1ZGlvVXJsPzogc3RyaW5nO1xuICB0aXRsZT86IHN0cmluZztcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIGltYWdlVXJsPzogc3RyaW5nO1xuICBzdGF0dXM6ICdwZW5kaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgY29tcGxldGVkQXQ/OiBEYXRlO1xuICBlcnJvcj86IHN0cmluZztcbiAgcmF3RGF0YT86IGFueTtcbn1cblxuY2xhc3MgQ2FsbGJhY2tTdG9yYWdlIHtcbiAgcHJpdmF0ZSBzdG9yYWdlID0gbmV3IE1hcDxzdHJpbmcsIENhbGxiYWNrRGF0YT4oKTtcblxuICAvLyDsg4gg7J6R7JeFIOuTseuhnVxuICByZWdpc3RlclRhc2sodGFza0lkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCB0YXNrRGF0YSA9IHtcbiAgICAgIHRhc2tJZCxcbiAgICAgIHN0YXR1czogJ3BlbmRpbmcnIGFzIGNvbnN0LFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+UtSBCRUZPUkUgcmVnaXN0cmF0aW9uIC0gU3RvcmFnZSBzaXplOicsIHRoaXMuc3RvcmFnZS5zaXplKTtcbiAgICBjb25zb2xlLmxvZygn8J+UtSBCRUZPUkUgcmVnaXN0cmF0aW9uIC0gQWxsIHRhc2tzOicsIEFycmF5LmZyb20odGhpcy5zdG9yYWdlLmtleXMoKSkpO1xuICAgIFxuICAgIHRoaXMuc3RvcmFnZS5zZXQodGFza0lkLCB0YXNrRGF0YSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfk50gUmVnaXN0ZXJlZCB0YXNrOicsIHRhc2tJZCwgJ1N0b3JhZ2Ugc2l6ZTonLCB0aGlzLnN0b3JhZ2Uuc2l6ZSk7XG4gICAgY29uc29sZS5sb2coJ/Cfk4sgVGFzayBkYXRhOicsIHRhc2tEYXRhKTtcbiAgICBjb25zb2xlLmxvZygn8J+foiBBRlRFUiByZWdpc3RyYXRpb24gLSBBbGwgdGFza3M6JywgQXJyYXkuZnJvbSh0aGlzLnN0b3JhZ2Uua2V5cygpKSk7XG4gICAgXG4gICAgLy8g65Ox66GdIOynge2bhCDrsJTroZwg7ZmV7J24XG4gICAgY29uc3QgdmVyaWZpZWQgPSB0aGlzLnN0b3JhZ2UuZ2V0KHRhc2tJZCk7XG4gICAgY29uc29sZS5sb2coJ+KchSBWZXJpZmljYXRpb24gLSB0YXNrIGV4aXN0czonLCAhIXZlcmlmaWVkKTtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBTdG9yYWdlIGluc3RhbmNlIElEOicsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgdGhpcyk7XG4gIH1cblxuICAvLyDsvZzrsLEg642w7J207YSwIOyggOyepVxuICBzYXZlQ2FsbGJhY2sodGFza0lkOiBzdHJpbmcsIGNhbGxiYWNrRGF0YTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnN0b3JhZ2UuZ2V0KHRhc2tJZCk7XG4gICAgaWYgKCFleGlzdGluZykge1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQ2FsbGJhY2sgcmVjZWl2ZWQgZm9yIHVua25vd24gdGFzazonLCB0YXNrSWQpO1xuICAgICAgLy8g66+465Ox66GdIOyekeyXheuPhCDsoIDsnqVcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXQodGFza0lkLCB7XG4gICAgICAgIHRhc2tJZCxcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8g7L2c67CxIOuNsOydtO2EsCDqtazsobAg67aE7ISdIOuwjyDsoIDsnqVcbiAgICBjb25zdCB1cGRhdGVkOiBDYWxsYmFja0RhdGEgPSB7XG4gICAgICAuLi5leGlzdGluZyxcbiAgICAgIHRhc2tJZCxcbiAgICAgIHJhd0RhdGE6IGNhbGxiYWNrRGF0YSxcbiAgICAgIGNvbXBsZXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfTtcblxuICAgIC8vIFN1bm8gQVBJIOydkeuLtSDqtazsobDsl5Ag65Sw66W4IOuNsOydtO2EsCDstpTstpxcbiAgICBpZiAoY2FsbGJhY2tEYXRhLmF1ZGlvX3VybCB8fCBjYWxsYmFja0RhdGEuYXVkaW9VcmwpIHtcbiAgICAgIHVwZGF0ZWQuYXVkaW9VcmwgPSBjYWxsYmFja0RhdGEuYXVkaW9fdXJsIHx8IGNhbGxiYWNrRGF0YS5hdWRpb1VybDtcbiAgICAgIHVwZGF0ZWQuc3RhdHVzID0gJ2NvbXBsZXRlZCc7XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrRGF0YS50aXRsZSkge1xuICAgICAgdXBkYXRlZC50aXRsZSA9IGNhbGxiYWNrRGF0YS50aXRsZTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2tEYXRhLmR1cmF0aW9uKSB7XG4gICAgICB1cGRhdGVkLmR1cmF0aW9uID0gY2FsbGJhY2tEYXRhLmR1cmF0aW9uO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFja0RhdGEuaW1hZ2VfdXJsIHx8IGNhbGxiYWNrRGF0YS5pbWFnZVVybCkge1xuICAgICAgdXBkYXRlZC5pbWFnZVVybCA9IGNhbGxiYWNrRGF0YS5pbWFnZV91cmwgfHwgY2FsbGJhY2tEYXRhLmltYWdlVXJsO1xuICAgIH1cblxuICAgIC8vIOyXkOufrCDsspjrpqxcbiAgICBpZiAoY2FsbGJhY2tEYXRhLmVycm9yIHx8IGNhbGxiYWNrRGF0YS5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICAgIHVwZGF0ZWQuc3RhdHVzID0gJ2ZhaWxlZCc7XG4gICAgICB1cGRhdGVkLmVycm9yID0gY2FsbGJhY2tEYXRhLmVycm9yIHx8ICdVbmtub3duIGVycm9yJztcbiAgICB9XG5cbiAgICB0aGlzLnN0b3JhZ2Uuc2V0KHRhc2tJZCwgdXBkYXRlZCk7XG4gICAgY29uc29sZS5sb2coJ/Cfkr4gU2F2ZWQgY2FsbGJhY2sgZGF0YSBmb3IgdGFzazonLCB0YXNrSWQsIHVwZGF0ZWQpO1xuICB9XG5cbiAgLy8g6rKw6rO8IOyhsO2ajFxuICBnZXRSZXN1bHQodGFza0lkOiBzdHJpbmcpOiBDYWxsYmFja0RhdGEgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldCh0YXNrSWQpIHx8IG51bGw7XG4gIH1cblxuICAvLyDrqqjrk6Ag7J6R7JeFIOyhsO2ajCAo65SU67KE6rmF7JqpKVxuICBnZXRBbGxUYXNrcygpOiBDYWxsYmFja0RhdGFbXSB7XG4gICAgY29uc29sZS5sb2coJ/CflI0gZ2V0QWxsVGFza3MgY2FsbGVkIC0gU3RvcmFnZSBzaXplOicsIHRoaXMuc3RvcmFnZS5zaXplKTtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBnZXRBbGxUYXNrcyAtIEFsbCB0YXNrIElEczonLCBBcnJheS5mcm9tKHRoaXMuc3RvcmFnZS5rZXlzKCkpKTtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBTdG9yYWdlIGluc3RhbmNlIElEOicsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgdGhpcyk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5zdG9yYWdlLnZhbHVlcygpKTtcbiAgfVxuXG4gIC8vIOyZhOujjOuQnCDsnpHsl4Xrp4wg7KGw7ZqMXG4gIGdldENvbXBsZXRlZFRhc2tzKCk6IENhbGxiYWNrRGF0YVtdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnN0b3JhZ2UudmFsdWVzKCkpLmZpbHRlcih0YXNrID0+IHRhc2suc3RhdHVzID09PSAnY29tcGxldGVkJyk7XG4gIH1cblxuICAvLyDsmKTrnpjrkJwg7J6R7JeFIOygleumrCAo66mU66qo66asIOq0gOumrClcbiAgY2xlYW51cChtYXhBZ2VIb3VyczogbnVtYmVyID0gMjQpOiBudW1iZXIge1xuICAgIGNvbnN0IGN1dG9mZiA9IG5ldyBEYXRlKERhdGUubm93KCkgLSBtYXhBZ2VIb3VycyAqIDYwICogNjAgKiAxMDAwKTtcbiAgICBsZXQgZGVsZXRlZCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IFt0YXNrSWQsIGRhdGFdIG9mIHRoaXMuc3RvcmFnZS5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChkYXRhLmNyZWF0ZWRBdCA8IGN1dG9mZikge1xuICAgICAgICB0aGlzLnN0b3JhZ2UuZGVsZXRlKHRhc2tJZCk7XG4gICAgICAgIGRlbGV0ZWQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGVsZXRlZCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn6e5IENsZWFuZWQgdXAgJHtkZWxldGVkfSBvbGQgdGFza3NgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxufVxuXG4vLyDsoITsl60g7Iux6riA7YakIOyduOyKpO2EtOyKpCAoTmV4dC5qcyDqsJzrsJwg7ZmY6rK9IOuMgOydkSlcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgdmFyIF9fbXVzaWNBcHBDYWxsYmFja1N0b3JhZ2U6IENhbGxiYWNrU3RvcmFnZSB8IHVuZGVmaW5lZDtcbn1cblxubGV0IGNhbGxiYWNrU3RvcmFnZUluc3RhbmNlOiBDYWxsYmFja1N0b3JhZ2U7XG5cbmlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaWYgKCFnbG9iYWxUaGlzLl9fbXVzaWNBcHBDYWxsYmFja1N0b3JhZ2UpIHtcbiAgICBnbG9iYWxUaGlzLl9fbXVzaWNBcHBDYWxsYmFja1N0b3JhZ2UgPSBuZXcgQ2FsbGJhY2tTdG9yYWdlKCk7XG4gICAgY29uc29sZS5sb2coJ/CflKcgQ3JlYXRlZCBORVcgQ2FsbGJhY2tTdG9yYWdlIGluc3RhbmNlIChnbG9iYWwpJyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ/CflIQgVXNpbmcgRVhJU1RJTkcgQ2FsbGJhY2tTdG9yYWdlIGluc3RhbmNlIChnbG9iYWwpJyk7XG4gIH1cbiAgY2FsbGJhY2tTdG9yYWdlSW5zdGFuY2UgPSBnbG9iYWxUaGlzLl9fbXVzaWNBcHBDYWxsYmFja1N0b3JhZ2U7XG59IGVsc2Uge1xuICBjYWxsYmFja1N0b3JhZ2VJbnN0YW5jZSA9IG5ldyBDYWxsYmFja1N0b3JhZ2UoKTtcbiAgY29uc29sZS5sb2coJ/CflKcgQ3JlYXRlZCBORVcgQ2FsbGJhY2tTdG9yYWdlIGluc3RhbmNlIChsb2NhbCknKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNhbGxiYWNrU3RvcmFnZSA9IGNhbGxiYWNrU3RvcmFnZUluc3RhbmNlOyJdLCJuYW1lcyI6WyJDYWxsYmFja1N0b3JhZ2UiLCJyZWdpc3RlclRhc2siLCJ0YXNrSWQiLCJ0YXNrRGF0YSIsInN0YXR1cyIsImNyZWF0ZWRBdCIsIkRhdGUiLCJjb25zb2xlIiwibG9nIiwic3RvcmFnZSIsInNpemUiLCJBcnJheSIsImZyb20iLCJrZXlzIiwic2V0IiwidmVyaWZpZWQiLCJnZXQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJzYXZlQ2FsbGJhY2siLCJjYWxsYmFja0RhdGEiLCJleGlzdGluZyIsIndhcm4iLCJ1cGRhdGVkIiwicmF3RGF0YSIsImNvbXBsZXRlZEF0IiwiYXVkaW9fdXJsIiwiYXVkaW9VcmwiLCJ0aXRsZSIsImR1cmF0aW9uIiwiaW1hZ2VfdXJsIiwiaW1hZ2VVcmwiLCJlcnJvciIsImdldFJlc3VsdCIsImdldEFsbFRhc2tzIiwidmFsdWVzIiwiZ2V0Q29tcGxldGVkVGFza3MiLCJmaWx0ZXIiLCJ0YXNrIiwiY2xlYW51cCIsIm1heEFnZUhvdXJzIiwiY3V0b2ZmIiwibm93IiwiZGVsZXRlZCIsImRhdGEiLCJlbnRyaWVzIiwiZGVsZXRlIiwiTWFwIiwiY2FsbGJhY2tTdG9yYWdlSW5zdGFuY2UiLCJnbG9iYWxUaGlzIiwiX19tdXNpY0FwcENhbGxiYWNrU3RvcmFnZSIsImNhbGxiYWNrU3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/storage.ts\n"));

/***/ })

}]);